### Context blocks

Some examples may need to be executed within a context. Use a context block for that.
Use the `__CODE__` macro to indicate where the code should go relative to this context.

    <% context 'a user named Carlita' do %>
    user = User.new name: 'Carlita'
    __CODE__
    <% end %>

    <% test 'users have a name', context: 'a user named Carlita', with: :magic_comments do %>
    user.name # => 'Carlita'
    <% end %>

Context blocks can, themselves, be rendered into a context `<% context 'current', context: "my context's context" do %>`

### Rake Task

If you want to add this as part of your build, there is a rake task:

```ruby
MountainBerryFields::RakeTask.new(:mbf, 'Readme.mountain_berry_fields.md')
```

which will allow you to say `rake mbf`. You could then add it to your default task with
`task default: :mbf`, or have whatever task runs your tests just execute it at the end.

### Creating your own test strategy

I've written the magic_comments and rspec strategies. You can write your own that do
whatever interesting thing you've thought of.

If you want it to be a gem, then the strategy needs to be in the file
`lib/mountain_berry_fields/test/your_strategy.rb`. Mountain Berry Fields
will automatically load files at these paths. If your strategy is not a gem,
and you want to manage loading the file containing its code, then you can ignore this.

Any strategy can be made accessible to the .mountain_berry_fields file like this:
`MountainBerryFields::Test::Strategy.register :your_strategy, YourStrategyHere`
And then accessed by `<% test 'testname', with: :your_strategy do %>`

Strategies will be initialized with the code to test, and are expected to
implement `#pass?` which returns a boolean of whether the code passes according
to that strategy, and `#failure_message` which will used to describe why the spec
failed to users.


## Installation

Add this line to your application's Gemfile:

    gem 'readme_tester'

And then execute:

    $ bundle

Or install it yourself as:

    $ gem install readme_tester

## TODO
* use MBF to test this readme
  - test the shit
* add links to examples where I do all of the above
  - edit dependencies to have mbf as dev dep
  - add rake tasks
  - push to github
* Fix dependencies such that they use Rubygems instead of Gemfiles
  - edit gemfiles and gemspecs
* Fix all readmes and gem descriptions
* push all 3 gems to github
* set it up on Travis

## Features to add for v2

Note that my use cases are to be able to test Deject and Surrogate,
which this currently does quite nicely. As a result, I have no imminent
need for any of these features, and so they are not a priority for me.
If you have a need for them (or for other features), let me know and that
will cause it to be a much higher priority for me. Alternatively,
pull requests that add them, fix bugs, or generally make it better,
are more than welcome.

* contexts should be lazy (can define context after a block that uses it)
* should be able to pass options to the initializer
* enable the test strategy to decide what should be returned
* support for multiple input files
* FLAGS:
* * -o set up input files so they don't need a .mountain_berry_fields in their name (output filename is provided, so input filename needs no naming conventions)
* * -s list all known test strategies
* * -v version
* * -c check syntax (no output, thus also no input filename restrictions)
* * -e flag for outputting erb (e.g. when it gives weird ass _buf error)
* * -h to display this menu
* * ?? to display the code that was passed to the test, along with the failure
